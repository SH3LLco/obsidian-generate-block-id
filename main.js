/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/


// main.ts
var { Plugin, MarkdownView, setIcon } = require("obsidian");
var HumanReadableBlockIDPlugin = class extends Plugin {
  onload() {
    this.addRibbonIcon("box", "Generate Block ID", () => {
      this.generateBlockIdForActiveView();
    });
    this.addCommand({
      id: "generate-block-id",
      name: "Create Block ID",
      callback: () => {
        this.generateBlockIdForActiveView();
      },
      hotkeys: []
    });
  }
  generateBlockIdForActiveView() {
    const activeLeaf = this.app.workspace.activeLeaf;
    if (activeLeaf && activeLeaf.view instanceof MarkdownView) {
      const editor = activeLeaf.view.editor;
      this.generateBlockId(editor, activeLeaf);
    }
  }
  generateBlockId(editor, activeLeaf) {
    const cursorPos = editor.getCursor();
    const lines = editor.getValue().split("\n");
    let headerStack = [];
    let lastHeaderLevel = 0;
    for (let i = cursorPos.line; i >= 0; i--) {
      if (this.isHeader(lines[i])) {
        const level = this.headerLevel(lines[i]);
        if (level < lastHeaderLevel || lastHeaderLevel === 0) {
          const header = this.sanitizeString(this.formatHeader(lines[i]));
          headerStack.unshift(header);
          lastHeaderLevel = level;
        }
      }
    }
    const headerId = headerStack.join("--");
    const foundBlocks = this.countBlocksUnderCurrentHeader(lines, cursorPos.line, headerId);
    const blockId = `${headerId}-${foundBlocks + 1}`;
    const blockReference = `^${blockId}`;
    editor.replaceRange(`${blockReference}
`, { line: cursorPos.line + 1, ch: 0 });
  }
  isHeader(line) {
    return /^(#+)\s/.test(line);
  }
  formatHeader(line) {
    return line.replace(/^#+\s/, "").toLowerCase();
  }
  sanitizeString(input) {
    return input.replace(/\s+/g, "-").replace(/[^a-z0-9-]/gi, "").replace(/-+/g, "-").replace(/^-+|-+$/g, "").toLowerCase();
  }
  countBlocksUnderCurrentHeader(lines, currentLine, headerId) {
    const blockIdPrefix = `^${headerId}-`;
    let count = 0;
    for (let i = 0; i <= currentLine; i++) {
      if (lines[i].includes(blockIdPrefix)) {
        count++;
      }
    }
    return count;
  }
  headerLevel(line) {
    const match = line.match(/^(\#+)\s/);
    return match ? match[1].length : 0;
  }
};
module.exports = HumanReadableBlockIDPlugin;
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgeyBQbHVnaW4sIE1hcmtkb3duVmlldywgc2V0SWNvbiB9ID0gcmVxdWlyZSgnb2JzaWRpYW4nKTtcclxuXHJcbmNsYXNzIEh1bWFuUmVhZGFibGVCbG9ja0lEUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcclxuICAgIG9ubG9hZCgpIHtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRSaWJib25JY29uKCdib3gnLCAnR2VuZXJhdGUgQmxvY2sgSUQnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVCbG9ja0lkRm9yQWN0aXZlVmlldygpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICAgICAgICBpZDogJ2dlbmVyYXRlLWJsb2NrLWlkJyxcclxuICAgICAgICAgICAgbmFtZTogJ0dlbmVyYXRlIEJsb2NrIElEJyxcclxuICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVCbG9ja0lkRm9yQWN0aXZlVmlldygpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBob3RrZXlzOiBbXVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGdlbmVyYXRlQmxvY2tJZEZvckFjdGl2ZVZpZXcoKSB7XHJcbiAgICAgICAgY29uc3QgYWN0aXZlTGVhZiA9IHRoaXMuYXBwLndvcmtzcGFjZS5hY3RpdmVMZWFmO1xyXG4gICAgICAgIGlmIChhY3RpdmVMZWFmICYmIGFjdGl2ZUxlYWYudmlldyBpbnN0YW5jZW9mIE1hcmtkb3duVmlldykge1xyXG4gICAgICAgICAgICBjb25zdCBlZGl0b3IgPSBhY3RpdmVMZWFmLnZpZXcuZWRpdG9yO1xyXG4gICAgICAgICAgICB0aGlzLmdlbmVyYXRlQmxvY2tJZChlZGl0b3IsIGFjdGl2ZUxlYWYpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgICAgIGdlbmVyYXRlQmxvY2tJZChlZGl0b3IsIGFjdGl2ZUxlYWYpIHtcclxuICAgICAgICAgICAgY29uc3QgY3Vyc29yUG9zID0gZWRpdG9yLmdldEN1cnNvcigpO1xyXG4gICAgICAgICAgICBjb25zdCBsaW5lcyA9IGVkaXRvci5nZXRWYWx1ZSgpLnNwbGl0KCdcXG4nKTtcclxuICAgICAgICAgICAgbGV0IGhlYWRlclN0YWNrID0gW107XHJcbiAgICAgICAgICAgIGxldCBsYXN0SGVhZGVyTGV2ZWwgPSAwO1xyXG4gICAgXHJcbiAgICAgICAgICAgIC8vIFRyYXZlcnNlIGJhY2t3YXJkcyB0byBmaW5kIHRoZSBjbG9zZXN0IHJlbGV2YW50IGhlYWRlcnMgdXAgdG8gdGhlIGN1cnJlbnQgcG9pbnRcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGN1cnNvclBvcy5saW5lOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNIZWFkZXIobGluZXNbaV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGV2ZWwgPSB0aGlzLmhlYWRlckxldmVsKGxpbmVzW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobGV2ZWwgPCBsYXN0SGVhZGVyTGV2ZWwgfHwgbGFzdEhlYWRlckxldmVsID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlciA9IHRoaXMuc2FuaXRpemVTdHJpbmcodGhpcy5mb3JtYXRIZWFkZXIobGluZXNbaV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyU3RhY2sudW5zaGlmdChoZWFkZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0SGVhZGVyTGV2ZWwgPSBsZXZlbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEZvcm11bGF0ZSB0aGUgaGVhZGVyIElEIGJhc2VkIG9uIHRoZSBzdGFja1xyXG4gICAgICAgIGNvbnN0IGhlYWRlcklkID0gaGVhZGVyU3RhY2suam9pbignLS0nKTtcclxuICAgICAgICBjb25zdCBmb3VuZEJsb2NrcyA9IHRoaXMuY291bnRCbG9ja3NVbmRlckN1cnJlbnRIZWFkZXIobGluZXMsIGN1cnNvclBvcy5saW5lLCBoZWFkZXJJZCk7XHJcblxyXG4gICAgICAgIC8vIEdlbmVyYXRlIHRoZSBibG9jayBJRCBpbmNsdWRpbmcgYWxsIHJlbGV2YW50IGhlYWRlcnNcclxuICAgICAgICBjb25zdCBibG9ja0lkID0gYCR7aGVhZGVySWR9LSR7Zm91bmRCbG9ja3MgKyAxfWA7XHJcbiAgICAgICAgY29uc3QgYmxvY2tSZWZlcmVuY2UgPSBgXiR7YmxvY2tJZH1gO1xyXG5cclxuICAgICAgICAvLyBJbnNlcnQgdGhlIGJsb2NrIElEIG9uIGEgbmV3IGxpbmUgYXQgdGhlIGN1cnNvciBwb3NpdGlvblxyXG4gICAgICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UoYCR7YmxvY2tSZWZlcmVuY2V9XFxuYCwgeyBsaW5lOiBjdXJzb3JQb3MubGluZSArIDEsIGNoOiAwIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlzSGVhZGVyKGxpbmUpIHtcclxuICAgICAgICByZXR1cm4gL14oIyspXFxzLy50ZXN0KGxpbmUpO1xyXG4gICAgfVxyXG5cclxuICAgIGZvcm1hdEhlYWRlcihsaW5lKSB7XHJcbiAgICAgICAgcmV0dXJuIGxpbmUucmVwbGFjZSgvXiMrXFxzLywgJycpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2FuaXRpemVTdHJpbmcoaW5wdXQpIHtcclxuICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXFxzKy9nLCAnLScpLnJlcGxhY2UoL1teYS16MC05LV0vZ2ksICcnKS5yZXBsYWNlKC8tKy9nLCAnLScpLnJlcGxhY2UoL14tK3wtKyQvZywgJycpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY291bnRCbG9ja3NVbmRlckN1cnJlbnRIZWFkZXIobGluZXMsIGN1cnJlbnRMaW5lLCBoZWFkZXJJZCkge1xyXG4gICAgICAgIGNvbnN0IGJsb2NrSWRQcmVmaXggPSBgXiR7aGVhZGVySWR9LWA7XHJcbiAgICAgICAgbGV0IGNvdW50ID0gMDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBjdXJyZW50TGluZTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChsaW5lc1tpXS5pbmNsdWRlcyhibG9ja0lkUHJlZml4KSkge1xyXG4gICAgICAgICAgICAgICAgY291bnQrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY291bnQ7XHJcbiAgICB9XHJcblxyXG4gICAgaGVhZGVyTGV2ZWwobGluZSkge1xyXG4gICAgICAgIGNvbnN0IG1hdGNoID0gbGluZS5tYXRjaCgvXihcXCMrKVxccy8pO1xyXG4gICAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdLmxlbmd0aCA6IDA7XHJcbiAgICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gSHVtYW5SZWFkYWJsZUJsb2NrSURQbHVnaW47XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7QUFBQSxJQUFNLEVBQUUsUUFBUSxjQUFjLFFBQVEsSUFBSSxRQUFRLFVBQVU7QUFFNUQsSUFBTSw2QkFBTixjQUF5QyxPQUFPO0FBQUEsRUFDNUMsU0FBUztBQUVMLFNBQUssY0FBYyxPQUFPLHFCQUFxQixNQUFNO0FBQ2pELFdBQUssNkJBQTZCO0FBQUEsSUFDdEMsQ0FBQztBQUVELFNBQUssV0FBVztBQUFBLE1BQ1osSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sVUFBVSxNQUFNO0FBQ1osYUFBSyw2QkFBNkI7QUFBQSxNQUN0QztBQUFBLE1BQ0EsU0FBUyxDQUFDO0FBQUEsSUFDZCxDQUFDO0FBQUEsRUFDTDtBQUFBLEVBRUEsK0JBQStCO0FBQzNCLFVBQU0sYUFBYSxLQUFLLElBQUksVUFBVTtBQUN0QyxRQUFJLGNBQWMsV0FBVyxnQkFBZ0IsY0FBYztBQUN2RCxZQUFNLFNBQVMsV0FBVyxLQUFLO0FBQy9CLFdBQUssZ0JBQWdCLFFBQVEsVUFBVTtBQUFBLElBQzNDO0FBQUEsRUFDSjtBQUFBLEVBR0ksZ0JBQWdCLFFBQVEsWUFBWTtBQUNoQyxVQUFNLFlBQVksT0FBTyxVQUFVO0FBQ25DLFVBQU0sUUFBUSxPQUFPLFNBQVMsRUFBRSxNQUFNLElBQUk7QUFDMUMsUUFBSSxjQUFjLENBQUM7QUFDbkIsUUFBSSxrQkFBa0I7QUFHdEIsYUFBUyxJQUFJLFVBQVUsTUFBTSxLQUFLLEdBQUcsS0FBSztBQUN0QyxVQUFJLEtBQUssU0FBUyxNQUFNLENBQUMsQ0FBQyxHQUFHO0FBQ3pCLGNBQU0sUUFBUSxLQUFLLFlBQVksTUFBTSxDQUFDLENBQUM7QUFDdkMsWUFBSSxRQUFRLG1CQUFtQixvQkFBb0IsR0FBRztBQUNsRCxnQkFBTSxTQUFTLEtBQUssZUFBZSxLQUFLLGFBQWEsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUM5RCxzQkFBWSxRQUFRLE1BQU07QUFDMUIsNEJBQWtCO0FBQUEsUUFDdEI7QUFBQSxNQUVKO0FBQUEsSUFDSjtBQUdKLFVBQU0sV0FBVyxZQUFZLEtBQUssSUFBSTtBQUN0QyxVQUFNLGNBQWMsS0FBSyw4QkFBOEIsT0FBTyxVQUFVLE1BQU0sUUFBUTtBQUd0RixVQUFNLFVBQVUsR0FBRyxZQUFZLGNBQWM7QUFDN0MsVUFBTSxpQkFBaUIsSUFBSTtBQUczQixXQUFPLGFBQWEsR0FBRztBQUFBLEdBQW9CLEVBQUUsTUFBTSxVQUFVLE9BQU8sR0FBRyxJQUFJLEVBQUUsQ0FBQztBQUFBLEVBQ2xGO0FBQUEsRUFFQSxTQUFTLE1BQU07QUFDWCxXQUFPLFVBQVUsS0FBSyxJQUFJO0FBQUEsRUFDOUI7QUFBQSxFQUVBLGFBQWEsTUFBTTtBQUNmLFdBQU8sS0FBSyxRQUFRLFNBQVMsRUFBRSxFQUFFLFlBQVk7QUFBQSxFQUNqRDtBQUFBLEVBRUEsZUFBZSxPQUFPO0FBQ2xCLFdBQU8sTUFBTSxRQUFRLFFBQVEsR0FBRyxFQUFFLFFBQVEsZ0JBQWdCLEVBQUUsRUFBRSxRQUFRLE9BQU8sR0FBRyxFQUFFLFFBQVEsWUFBWSxFQUFFLEVBQUUsWUFBWTtBQUFBLEVBQzFIO0FBQUEsRUFFQSw4QkFBOEIsT0FBTyxhQUFhLFVBQVU7QUFDeEQsVUFBTSxnQkFBZ0IsSUFBSTtBQUMxQixRQUFJLFFBQVE7QUFDWixhQUFTLElBQUksR0FBRyxLQUFLLGFBQWEsS0FBSztBQUNuQyxVQUFJLE1BQU0sQ0FBQyxFQUFFLFNBQVMsYUFBYSxHQUFHO0FBQ2xDO0FBQUEsTUFDSjtBQUFBLElBQ0o7QUFDQSxXQUFPO0FBQUEsRUFDWDtBQUFBLEVBRUEsWUFBWSxNQUFNO0FBQ2QsVUFBTSxRQUFRLEtBQUssTUFBTSxVQUFVO0FBQ25DLFdBQU8sUUFBUSxNQUFNLENBQUMsRUFBRSxTQUFTO0FBQUEsRUFDckM7QUFDSjtBQUVBLE9BQU8sVUFBVTsiLAogICJuYW1lcyI6IFtdCn0K
