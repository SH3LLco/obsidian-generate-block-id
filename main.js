/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/


// main.ts
var { Plugin, MarkdownView } = require("obsidian");
var HumanReadableBlockIDPlugin = class extends Plugin {
  onload() {
    this.addRibbonIcon("dice", "Generate Block ID", () => {
      this.generateBlockIdForActiveView();
    });
    this.addCommand({
      id: "generate-block-id",
      name: "Command",
      callback: () => {
        this.generateBlockIdForActiveView();
      },
      hotkeys: []
    });
  }
  generateBlockIdForActiveView() {
    const activeLeaf = this.app.workspace.activeLeaf;
    if (activeLeaf && activeLeaf.view instanceof MarkdownView) {
      const editor = activeLeaf.view.editor;
      this.generateBlockId(editor, activeLeaf);
    }
  }
  generateBlockId(editor, activeLeaf) {
    const cursorPos = editor.getCursor();
    const lines = editor.getValue().split("\n");
    let headerStack = [];
    const fileName = this.sanitizeString(activeLeaf.view.file.basename);
    for (let i = cursorPos.line; i >= 0; i--) {
      if (this.isHeader(lines[i])) {
        headerStack.unshift(this.sanitizeString(this.formatHeader(lines[i])));
      }
    }
    if (headerStack.length === 0) {
      headerStack.push(fileName);
    }
    const headerId = headerStack.join("--");
    const foundBlocks = this.countBlocksUnderHeader(lines, headerId);
    const blockId = `${headerId}-${foundBlocks + 1}`;
    const blockReference = `^${blockId}`;
    editor.replaceRange(`
${blockReference}
`, { line: cursorPos.line + 1, ch: 0 });
  }
  isHeader(line) {
    return /^(#+)\s/.test(line);
  }
  formatHeader(line) {
    return line.replace(/^#+\s/, "").toLowerCase();
  }
  sanitizeString(input) {
    let sanitized = input.replace(/\s+/g, "-");
    sanitized = sanitized.replace(/[^a-z0-9-]/gi, "");
    sanitized = sanitized.replace(/-+/g, "-");
    sanitized = sanitized.replace(/^-+|-+$/g, "");
    return sanitized.toLowerCase();
  }
  countBlocksUnderHeader(lines, headerId) {
    const blockIdPrefix = `^${headerId}-`;
    let count = 0;
    for (let line of lines) {
      if (line.trim().startsWith(blockIdPrefix)) {
        count++;
      }
    }
    return count;
  }
};
module.exports = HumanReadableBlockIDPlugin;
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgeyBQbHVnaW4sIE1hcmtkb3duVmlldyB9ID0gcmVxdWlyZSgnb2JzaWRpYW4nKTtcclxuXHJcbmNsYXNzIEh1bWFuUmVhZGFibGVCbG9ja0lEUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcclxuICAgIG9ubG9hZCgpIHtcclxuICAgICAgICAvLyBBZGQgYSByaWJib24gaWNvbiBmb3IgdGhlIGJsb2NrIElEIGdlbmVyYXRpb25cclxuICAgICAgICB0aGlzLmFkZFJpYmJvbkljb24oJ2RpY2UnLCAnR2VuZXJhdGUgQmxvY2sgSUQnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVCbG9ja0lkRm9yQWN0aXZlVmlldygpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBBZGQgYSBjb21tYW5kIHRvIHRoZSBjb21tYW5kIHBhbGV0dGUgZm9yIGJsb2NrIElEIGdlbmVyYXRpb25cclxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICAgICAgICBpZDogJ2dlbmVyYXRlLWJsb2NrLWlkJyxcclxuICAgICAgICAgICAgbmFtZTogJ0NvbW1hbmQnLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZUJsb2NrSWRGb3JBY3RpdmVWaWV3KCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGhvdGtleXM6IFtdXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2VuZXJhdGVCbG9ja0lkRm9yQWN0aXZlVmlldygpIHtcclxuICAgICAgICBjb25zdCBhY3RpdmVMZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUxlYWY7XHJcbiAgICAgICAgaWYgKGFjdGl2ZUxlYWYgJiYgYWN0aXZlTGVhZi52aWV3IGluc3RhbmNlb2YgTWFya2Rvd25WaWV3KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVkaXRvciA9IGFjdGl2ZUxlYWYudmlldy5lZGl0b3I7XHJcbiAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVCbG9ja0lkKGVkaXRvciwgYWN0aXZlTGVhZik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdlbmVyYXRlQmxvY2tJZChlZGl0b3IsIGFjdGl2ZUxlYWYpIHtcclxuICAgICAgICBjb25zdCBjdXJzb3JQb3MgPSBlZGl0b3IuZ2V0Q3Vyc29yKCk7XHJcbiAgICAgICAgY29uc3QgbGluZXMgPSBlZGl0b3IuZ2V0VmFsdWUoKS5zcGxpdCgnXFxuJyk7XHJcbiAgICAgICAgbGV0IGhlYWRlclN0YWNrID0gW107XHJcbiAgICAgICAgY29uc3QgZmlsZU5hbWUgPSB0aGlzLnNhbml0aXplU3RyaW5nKGFjdGl2ZUxlYWYudmlldy5maWxlLmJhc2VuYW1lKTtcclxuXHJcbiAgICAgICAgLy8gVHJhdmVyc2UgYmFja3dhcmRzIHRvIGZpbmQgYWxsIGhlYWRlcnMgdXAgdG8gdGhlIHRvcFxyXG4gICAgICAgIGZvciAobGV0IGkgPSBjdXJzb3JQb3MubGluZTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNIZWFkZXIobGluZXNbaV0pKSB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXJTdGFjay51bnNoaWZ0KHRoaXMuc2FuaXRpemVTdHJpbmcodGhpcy5mb3JtYXRIZWFkZXIobGluZXNbaV0pKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElmIG5vIGhlYWRlcnMgYXJlIGZvdW5kLCB1c2UgdGhlIGZpbGUgbmFtZSBhcyB0aGUgYmFzZSBmb3IgdGhlIGJsb2NrIElEXHJcbiAgICAgICAgaWYgKGhlYWRlclN0YWNrLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBoZWFkZXJTdGFjay5wdXNoKGZpbGVOYW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGhlYWRlcklkID0gaGVhZGVyU3RhY2suam9pbignLS0nKTtcclxuICAgICAgICAvLyBDb3VudCBleGlzdGluZyBibG9ja3MgdW5kZXIgdGhlIGN1cnJlbnQgaGVhZGVyIHNlY3Rpb25cclxuICAgICAgICBjb25zdCBmb3VuZEJsb2NrcyA9IHRoaXMuY291bnRCbG9ja3NVbmRlckhlYWRlcihsaW5lcywgaGVhZGVySWQpO1xyXG5cclxuICAgICAgICAvLyBHZW5lcmF0ZSB0aGUgYmxvY2sgSUQgaW5jbHVkaW5nIGFsbCBoZWFkZXJzIGluIHRoZSBzdGFjayBvciBmaWxlIG5hbWVcclxuICAgICAgICBjb25zdCBibG9ja0lkID0gYCR7aGVhZGVySWR9LSR7Zm91bmRCbG9ja3MgKyAxfWA7XHJcbiAgICAgICAgY29uc3QgYmxvY2tSZWZlcmVuY2UgPSBgXiR7YmxvY2tJZH1gO1xyXG5cclxuICAgICAgICAvLyBJbnNlcnQgdGhlIGJsb2NrIElEIG9uIGEgbmV3IGxpbmUgYXQgdGhlIGN1cnNvciBwb3NpdGlvblxyXG4gICAgICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UoYFxcbiR7YmxvY2tSZWZlcmVuY2V9XFxuYCwgeyBsaW5lOiBjdXJzb3JQb3MubGluZSArIDEsIGNoOiAwIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlzSGVhZGVyKGxpbmUpIHtcclxuICAgICAgICAvLyBFbnN1cmVzIHRoYXQgaGVhZGVycyBhcmUgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgbGluZSBhbmQgZm9sbG93ZWQgYnkgYSBzcGFjZVxyXG4gICAgICAgIHJldHVybiAvXigjKylcXHMvLnRlc3QobGluZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZm9ybWF0SGVhZGVyKGxpbmUpIHtcclxuICAgICAgICByZXR1cm4gbGluZS5yZXBsYWNlKC9eIytcXHMvLCAnJykudG9Mb3dlckNhc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBzYW5pdGl6ZVN0cmluZyhpbnB1dCkge1xyXG4gICAgICAgIC8vIFJlcGxhY2Ugc3BhY2VzIHdpdGggaHlwaGVucywgdGhlbiByZW1vdmUgYWxsIGNoYXJhY3RlcnMgdGhhdCBhcmUgbm90IGFscGhhbnVtZXJpYyBvciBoeXBoZW5zXHJcbiAgICAgICAgbGV0IHNhbml0aXplZCA9IGlucHV0LnJlcGxhY2UoL1xccysvZywgJy0nKTtcclxuICAgICAgICBzYW5pdGl6ZWQgPSBzYW5pdGl6ZWQucmVwbGFjZSgvW15hLXowLTktXS9naSwgJycpO1xyXG4gICAgICAgIHNhbml0aXplZCA9IHNhbml0aXplZC5yZXBsYWNlKC8tKy9nLCAnLScpO1xyXG4gICAgICAgIHNhbml0aXplZCA9IHNhbml0aXplZC5yZXBsYWNlKC9eLSt8LSskL2csICcnKTtcclxuICAgICAgICByZXR1cm4gc2FuaXRpemVkLnRvTG93ZXJDYXNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY291bnRCbG9ja3NVbmRlckhlYWRlcihsaW5lcywgaGVhZGVySWQpIHtcclxuICAgICAgICBjb25zdCBibG9ja0lkUHJlZml4ID0gYF4ke2hlYWRlcklkfS1gO1xyXG4gICAgICAgIGxldCBjb3VudCA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgbGluZSBvZiBsaW5lcykge1xyXG4gICAgICAgICAgICBpZiAobGluZS50cmltKCkuc3RhcnRzV2l0aChibG9ja0lkUHJlZml4KSkge1xyXG4gICAgICAgICAgICAgICAgY291bnQrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY291bnQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gSHVtYW5SZWFkYWJsZUJsb2NrSURQbHVnaW47XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7QUFBQSxJQUFNLEVBQUUsUUFBUSxhQUFhLElBQUksUUFBUSxVQUFVO0FBRW5ELElBQU0sNkJBQU4sY0FBeUMsT0FBTztBQUFBLEVBQzVDLFNBQVM7QUFFTCxTQUFLLGNBQWMsUUFBUSxxQkFBcUIsTUFBTTtBQUNsRCxXQUFLLDZCQUE2QjtBQUFBLElBQ3RDLENBQUM7QUFHRCxTQUFLLFdBQVc7QUFBQSxNQUNaLElBQUk7QUFBQSxNQUNKLE1BQU07QUFBQSxNQUNOLFVBQVUsTUFBTTtBQUNaLGFBQUssNkJBQTZCO0FBQUEsTUFDdEM7QUFBQSxNQUNBLFNBQVMsQ0FBQztBQUFBLElBQ2QsQ0FBQztBQUFBLEVBQ0w7QUFBQSxFQUVBLCtCQUErQjtBQUMzQixVQUFNLGFBQWEsS0FBSyxJQUFJLFVBQVU7QUFDdEMsUUFBSSxjQUFjLFdBQVcsZ0JBQWdCLGNBQWM7QUFDdkQsWUFBTSxTQUFTLFdBQVcsS0FBSztBQUMvQixXQUFLLGdCQUFnQixRQUFRLFVBQVU7QUFBQSxJQUMzQztBQUFBLEVBQ0o7QUFBQSxFQUVBLGdCQUFnQixRQUFRLFlBQVk7QUFDaEMsVUFBTSxZQUFZLE9BQU8sVUFBVTtBQUNuQyxVQUFNLFFBQVEsT0FBTyxTQUFTLEVBQUUsTUFBTSxJQUFJO0FBQzFDLFFBQUksY0FBYyxDQUFDO0FBQ25CLFVBQU0sV0FBVyxLQUFLLGVBQWUsV0FBVyxLQUFLLEtBQUssUUFBUTtBQUdsRSxhQUFTLElBQUksVUFBVSxNQUFNLEtBQUssR0FBRyxLQUFLO0FBQ3RDLFVBQUksS0FBSyxTQUFTLE1BQU0sQ0FBQyxDQUFDLEdBQUc7QUFDekIsb0JBQVksUUFBUSxLQUFLLGVBQWUsS0FBSyxhQUFhLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUFBLE1BQ3hFO0FBQUEsSUFDSjtBQUdBLFFBQUksWUFBWSxXQUFXLEdBQUc7QUFDMUIsa0JBQVksS0FBSyxRQUFRO0FBQUEsSUFDN0I7QUFFQSxVQUFNLFdBQVcsWUFBWSxLQUFLLElBQUk7QUFFdEMsVUFBTSxjQUFjLEtBQUssdUJBQXVCLE9BQU8sUUFBUTtBQUcvRCxVQUFNLFVBQVUsR0FBRyxZQUFZLGNBQWM7QUFDN0MsVUFBTSxpQkFBaUIsSUFBSTtBQUczQixXQUFPLGFBQWE7QUFBQSxFQUFLO0FBQUEsR0FBb0IsRUFBRSxNQUFNLFVBQVUsT0FBTyxHQUFHLElBQUksRUFBRSxDQUFDO0FBQUEsRUFDcEY7QUFBQSxFQUVBLFNBQVMsTUFBTTtBQUVYLFdBQU8sVUFBVSxLQUFLLElBQUk7QUFBQSxFQUM5QjtBQUFBLEVBRUEsYUFBYSxNQUFNO0FBQ2YsV0FBTyxLQUFLLFFBQVEsU0FBUyxFQUFFLEVBQUUsWUFBWTtBQUFBLEVBQ2pEO0FBQUEsRUFFQSxlQUFlLE9BQU87QUFFbEIsUUFBSSxZQUFZLE1BQU0sUUFBUSxRQUFRLEdBQUc7QUFDekMsZ0JBQVksVUFBVSxRQUFRLGdCQUFnQixFQUFFO0FBQ2hELGdCQUFZLFVBQVUsUUFBUSxPQUFPLEdBQUc7QUFDeEMsZ0JBQVksVUFBVSxRQUFRLFlBQVksRUFBRTtBQUM1QyxXQUFPLFVBQVUsWUFBWTtBQUFBLEVBQ2pDO0FBQUEsRUFFQSx1QkFBdUIsT0FBTyxVQUFVO0FBQ3BDLFVBQU0sZ0JBQWdCLElBQUk7QUFDMUIsUUFBSSxRQUFRO0FBQ1osYUFBUyxRQUFRLE9BQU87QUFDcEIsVUFBSSxLQUFLLEtBQUssRUFBRSxXQUFXLGFBQWEsR0FBRztBQUN2QztBQUFBLE1BQ0o7QUFBQSxJQUNKO0FBQ0EsV0FBTztBQUFBLEVBQ1g7QUFDSjtBQUVBLE9BQU8sVUFBVTsiLAogICJuYW1lcyI6IFtdCn0K
